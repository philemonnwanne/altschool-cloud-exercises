---
- name: deploy apache2 on host server[remote]
  hosts: all
  become: true # Perform all the Ansible playbook tasks as another user.
  become_user: root # Default username to be used by Ansible
  vars:
    - vars/vault

  tasks:
    - name: Update "apt" repository
      apt:
        update_cache: yes # Run the equivalent of apt update before the operation
        autoclean: yes # Remove useless packages from the cache
        autoremove: yes

    - name: Install (git, apache2 unzip, curl)
      apt:
        pkg:
        - git
        - apache2
        - unzip
        - curl
 #Install MySQL
    - name: Add mySQL Dev apt repository
      get_url:
        url: https://dev.mysql.com/get/mysql-apt-config_0.8.22-1_all.deb
        dest: .

    - name: Update "apt"
      ansible.builtin.apt:
        update_cache: yes
        autoclean: yes # Remove useless packages from the cache

    # - name: ensure pexpect is installed in the playbook python
    #   pip:
    #     name: pexpect
    #     state: present


# MySQL Configuration
    - name: Install MySQL server
      apt:
        name: mysql-server
        state: latest


    - name: Install PyMySQL Library
      pip: name=pymysql state=latest

    - name: Start the MySQL service
      service:
        name: mysql
        state: started
        enabled: true

    - name: Change the authentication plugin of MySQL root user to mysql_native_password
      command: mysql -u root -e 'UPDATE mysql.user SET plugin="mysql_native_password" WHERE user="root" AND host="localhost"'

    - name: Reload all Privileges
      command: mysql -u root -e 'FLUSH PRIVILEGES'

    - name: Set MySQL root password
      mysql_user:
        login_host: 'localhost'
        login_user: 'root'
        login_password: ''
        name: 'root'
        password: '{{ mysql_root_password }}'
        state: present

    - name: Delete Anonymous MySQL server user for localhost
      mysql_user:
        login_user: 'root'
        login_password: "{{ mysql_root_password }}"
        name: ''
        host: localhost
        state: absent

    - name: Create a Database
      mysql_db:
        login_user: 'root'
        login_password: "{{ mysql_root_password }}"
        name: "{{ DB_NAME }}"
        state: present

    - name: Create a Database User
      mysql_user:
        login_user: 'root'
        login_password: "{{ mysql_root_password }}"
        name: "{{ DB_USER }}"
        password: "{{ USER_PASSWORD }}"
        priv: '{{ DB_NAME }}.*:ALL,GRANT'

    - name: Remove the MySQL Test Database
      mysql_db:
        login_user: 'root'
        login_password: "{{ mysql_root_password }}"
        name: test
        state: absent

# UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

    - name: "UFW - Allow HTTPS on port {{ https_port }}"
      ufw:
        rule: allow
        port: "{{ https_port }}"
        proto: tcp
      
    - name: "UFW - Allow SSH on port {{ ssh_port }}"
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp

    - name: "UFW - Allow MySQL on port {{ mysql_port }}"
      ufw:
        rule: allow
        port: "{{ mysql_port }}"
        proto: tcp



    - name: Change the working directory to /var/www/ and create alschool directory
      command: mkdir altschool 
      args:
        chdir: /var/www/

    - name: Change the working directory to /var/www/altschool
      command: cd altschool
    
    - name: Clone the project repo into a new directory
      git:
        repo: https://github.com/f1amy/laravel-realworld-example-app.git
        dest: /var/www/altschool/laravel
        clone: yes
        update: no
    
    - name: Change the working directory to /var/www/altschool/laravel
      command: cd /var/www/altschool/laravel

    # The edit the web.php file in the routes directory
    #
    #

    - name: Change the working directory to /var/www/altschool/laravel/routes
      command: cd /var/www/altschool/laravel/routes

    - name: Create and edit the .env file
      ansible.builtin.copy:
        src: /var/www/altschool/laravel/.env.example 
        dest: /var/www/altschool/laravel/.env
        remote_src: yes

    #
     # The Configure your .env file just as it is in the output below, only make #changes to the DB_DATABASE and DB_PASSWORD lines
    #
    
    - name: Change the project directory and install Composer
      ansible.builtin.shell: curl -sS https://getcomposer.org/installer | php
      args:
        chdir: /var/www/altschool/laravel
    
    - name: Move the downloaded php binary to the system path
      ansible.builtin.command: mv composer.phar /usr/local/bin/composer
        
    - name: Make composer executable by user and group
      ansible.builtin.file:
      path: /usr/local/bin/composer
      mode: u+x,g+x,o-x

    - name: Download and installs all composer libs and dependencies outlined in the /var/www/altschool/laravel/composer.lock
      community.general.composer:
        command: install
        working_dir: /var/www/altschool/laravel
      
    - name: Run the php artisan generate command 
      ansible.builtin.command: 
      - php artisan key:generate
      - php artisan config:cache
      - php artisan migrate:fresh
      - php artisan migrate --seed
      args:
        chdir: /var/www/altschool/laravel

    - name: Create an apache virtual host configuration file
      ansible.builtin.copy:
        src: /home/vagrant/altschool.conf
        dest: /etc/apache2/sites-available/altschool.conf

    - name: Disable default apache page and enable laravel page
      ansible.builtin.command: 
      - a2enmod rewrite
      - a2dissite 000-default.conf
      - a2ensite altschool.conf

    - name: Change file ownership, group and permissions
      ansible.builtin.file:
      path: /var/www/altschool/laravel
      owner: www-data
      group: www-data
      mode: '775'

    - name: Disable default apache page and enable laravel page
      ansible.builtin.command: systemctl restart apache2











...


















---
- name: command module demo
  hosts: all
  tasks:
    - name: check uptime
      ansible.builtin.command: uptime
      register: command_output
    - name: command output
      ansible.builtin.debug:
        var: command_output.stdout_lines


- name: shell module demo
  hosts: all
  tasks:
    - name: list file(s) and folder(s)
      ansible.builtin.shell: 'ls -l *'
      register: command_output
    - name: command output
      ansible.builtin.debug:
        var: command_output.stdout_lines
















































# ---
# - name: deploy apache2 on host server[remote]
#   hosts: all
#   become: true # Perform all the Ansible playbook tasks as another user.
#   become_user: root # Default username to be used by Ansible
#   tasks:
#     - name: Update "apt" repository
#       ansible.builtin.apt:
#         update_cache: yes # Run the equivalent of apt update before the operation
#         autoclean: yes # Remove useless packages from the cache
#         autoremove: yes

#     - name: Install (git, apache2 unzip, curl)
#       ansible.builtin.command: apt install -y git apache2 unzip curl

#     - name: Install (lsb-release apt-transport-https ca-certificates)
#       ansible.builtin.command: apt -y install lsb-release apt-transport-https ca-certificates

#     - name: Add the SURY PPA for PHP 8.1
#       ansible.builtin.command: wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
     
#     - name: Add the PPA to the server packages
#       ansible.builtin.shell: echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list

#     - name: Update "apt"
#       ansible.builtin.apt:
#         update_cache: yes

#     - name: Install PHP 8.1 and it's libraries
#       ansible.builtin.command: apt install php libapache2-mod-php php8.1-mysql php8.1-common php8.1-mysql php8.1-xml php8.1-xmlrpc php8.1-curl php8.1-gd php8.1-imagick php8.1-cli php8.1-dev php8.1-imap php8.1-mbstring php8.1-opcache php8.1-soap php8.1-zip php8.1-intl -y

#     - name: Update "apt"
#       ansible.builtin.apt:
#         update_cache: yes
    
#     - name: Add mySQL Dev apt repository
#       ansible.builtin.get_url:
#         url: https://dev.mysql.com/get/mysql-apt-config_0.8.22-1_all.deb
#         dest: .

#     - name: Update "apt"
#       ansible.builtin.apt:
#         update_cache: yes
